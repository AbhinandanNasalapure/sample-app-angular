{"version":3,"sources":["webpack:///./src/app/mymessages/mymessages.module.ts","webpack:///./src/app/mymessages/messages-data.service.ts","webpack:///./src/app/util/sessionStorage.ts","webpack:///./src/app/mymessages/folders-data.service.ts","webpack:///./src/app/mymessages/compose.component.ts","webpack:///./src/app/mymessages/message-list.component.ts","webpack:///./src/app/mymessages/message.component.ts","webpack:///./src/app/mymessages/mymessages.component.ts","webpack:///./src/app/mymessages/folder-list.component.ts","webpack:///./src/app/mymessages/format-message.pipe.ts","webpack:///./src/app/mymessages/message-table.component.ts","webpack:///./src/app/mymessages/mymessages.states.ts","webpack:///./src/app/mymessages/sort-messages.component.ts"],"names":[],"mappings":"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","file":"0.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ComposeComponent } from './compose.component';\nimport { MessageComponent } from './message.component';\nimport { MessageListComponent } from './message-list.component';\nimport { MymessagesComponent } from './mymessages.component';\nimport { UIRouterModule } from 'ui-router-ng2';\nimport { MYMESSAGES_STATES } from './mymessages.states';\nimport { FormsModule } from '@angular/forms';\nimport { MessagesDataService } from './messages-data.service';\nimport { FoldersDataService } from './folders-data.service';\nimport { FolderListComponent } from './folder-list.component';\nimport { MessageTableComponent } from './message-table.component';\nimport { SortMessagesComponent } from './sort-messages.component';\nimport { FormatMessagePipe } from './format-message.pipe';\n\n@NgModule({\n  imports: [\n    UIRouterModule.forChild({ states: MYMESSAGES_STATES }),\n    FormsModule,\n    CommonModule\n  ],\n  declarations: [\n    ComposeComponent,\n    MessageComponent,\n    MessageListComponent,\n    MymessagesComponent,\n    FolderListComponent,\n    MessageTableComponent,\n    SortMessagesComponent,\n    FormatMessagePipe,\n  ],\n  providers: [\n    MessagesDataService,\n    FoldersDataService,\n  ]\n})\nexport class MymessagesModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/mymessages/mymessages.module.ts","import { Injectable } from '@angular/core';\nimport { SessionStorage } from '../util/sessionStorage';\nimport { AppConfigService, SortOrder } from '../global/app-config.service';\nimport { Folder } from './folders-data.service';\n\nexport interface Message {\n  read: boolean;\n  folder: string;\n  body: string;\n  subject: string;\n  from: string;\n  to: string;\n  date: string;\n  senderName: {\n    last: string;\n    first: string\n  };\n  corpus: string;\n  _id: string;\n}\n\n/** A fake REST client API for Messages resources */\n@Injectable()\nexport class MessagesDataService extends SessionStorage<Message> {\n  static sortedMessages(messages: Message[], sortOrder: SortOrder): Message[] {\n    const getField = (message: Message) =>\n      message[sortOrder.sortBy].toString();\n\n    return messages.slice().sort((a, b) =>\n      getField(a).localeCompare(getField(b)) * sortOrder.order\n    );\n  }\n\n  constructor(appConfig: AppConfigService) {\n    // http://beta.json-generator.com/api/json/get/VJl5GbIze\n    super('messages', 'assets/messages.json', appConfig);\n  }\n\n  byFolder(folder: Folder) {\n    const searchObject = { folder: folder._id };\n    const toFromAttr = ['drafts', 'sent'].indexOf(folder._id) !== -1 ? 'from' : 'to';\n    searchObject[toFromAttr] = this.appConfig.emailAddress;\n    return this.search(searchObject);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/mymessages/messages-data.service.ts","import { pushToArr, guid, wait } from './util';\nimport { AppConfigService } from '../global/app-config.service';\n\n/**\n * This class simulates a RESTful resource, but the API calls fetch data from\n * Session Storage instead of an HTTP call.\n *\n * Once configured, it loads the initial (pristine) data from the URL provided (using HTTP).\n * It exposes GET/PUT/POST/DELETE-like API that operates on the data.  All the data is also\n * stored in Session Storage.  If any data is modified in memory, session storage is updated.\n * If the browser is refreshed, the SessionStorage object will try to fetch the existing data from\n * the session, before falling back to re-fetching the initial data using HTTP.\n *\n * For an example, please see dataSources.js\n */\nexport class SessionStorage<T> {\n  // data\n  _data: Promise<T[]>;\n  _idProp: string;\n  _eqFn: (a: T, b: T) => boolean;\n\n  /**\n   * Creates a new SessionStorage object\n   *\n   * @param sessionStorageKey The session storage key. The data will be stored in browser's session storage under this key.\n   * @param sourceUrl The url that contains the initial data.\n   * @param appConfig Pass in the AppConfig object\n   */\n  constructor(public sessionStorageKey, sourceUrl, public appConfig: AppConfigService) {\n    let data;\n    const fromSession = sessionStorage.getItem(sessionStorageKey);\n    // A promise for *all* of the data.\n    this._data = undefined;\n\n    // For each data object, the _idProp defines which property has that object's unique identifier\n    this._idProp = '_id';\n\n    // A basic triple-equals equality checker for two values\n    this._eqFn = (l, r) => l[this._idProp] === r[this._idProp];\n\n    if (fromSession) {\n      try {\n        // Try to parse the existing data from the Session Storage API\n        data = JSON.parse(fromSession);\n      } catch (e) {\n        console.log('Unable to parse session messages, retrieving intial data.');\n      }\n    }\n\n    // Create a promise for the data; Either the existing data from session storage, or the initial data via $http request\n    this._data = (data ? Promise.resolve(data) : fetch(sourceUrl)\n        .then(resp => resp.json()))\n        .then(this._commit.bind(this))\n        .then(() => JSON.parse(sessionStorage.getItem(sessionStorageKey)));\n  }\n\n  /** Saves all the data back to the session storage */\n  _commit(data: T[]): Promise<T[]> {\n    sessionStorage.setItem(this.sessionStorageKey, JSON.stringify(data));\n    return Promise.resolve(data);\n  }\n\n  /** Helper which simulates a delay, then provides the `thenFn` with the data */\n  all(): Promise<T[]> {\n    const delay = this.appConfig.restDelay;\n    return wait(delay).then(() => this._data);\n  }\n\n  /** Given a sample item, returns a promise for all the data for items which have the same properties as the sample */\n  search(exampleItem): Promise<T[]> {\n    const contains = (search, inString) =>\n        ('' + inString).indexOf('' + search) !== -1;\n    const matchesExample = (example, item) =>\n        Object.keys(example).reduce((memo, key) => memo && contains(example[key], item[key]), true);\n    return this.all().then(items =>\n        items.filter(matchesExample.bind(null, exampleItem)));\n  }\n\n  /** Returns a promise for the item with the given identifier */\n  get(id): Promise<T> {\n    return this.all().then(items =>\n        items.find(item => item[this._idProp] === id));\n  }\n\n  /** Returns a promise to save the item.  It delegates to put() or post() if the object has or does not have an identifier set */\n  save(item: T): Promise<T>  {\n    return item[this._idProp] ? this.put(item) : this.post(item);\n  }\n\n  /** Returns a promise to save (POST) a new item.   The item's identifier is auto-assigned. */\n  post(item: T): Promise<T> {\n    item[this._idProp] = guid();\n    return this.all()\n      .then(items => pushToArr(items, item))\n      .then(this._commit.bind(this))\n      .then(() => item);\n  }\n\n  /** Returns a promise to save (PUT) an existing item. */\n  put(item: T, eqFn = this._eqFn): Promise<T> {\n    return this.all().then(items => {\n      const idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) {\n        throw Error(`${item} not found in ${this}`);\n      }\n      items[idx] = item;\n      return this._commit(items).then(() => item);\n    });\n  }\n\n  /** Returns a promise to remove (DELETE) an item. */\n  remove(item, eqFn = this._eqFn): Promise<T> {\n    return this.all().then(items => {\n      const idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) {\n        throw Error(`${item} not found in ${this}`);\n      }\n      items.splice(idx, 1);\n      return this._commit(items).then(() => item);\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/util/sessionStorage.ts","import { Injectable } from '@angular/core';\nimport { SessionStorage } from '../util/sessionStorage';\nimport { AppConfigService } from '../global/app-config.service';\n\nexport interface Folder {\n  _id: string;\n  columns: string[];\n  actions: string[];\n}\n\n/** A fake REST client API for Folders resources */\n@Injectable()\nexport class FoldersDataService extends SessionStorage<Folder> {\n  constructor(appConfig: AppConfigService) {\n    super('folders', 'assets/folders.json', appConfig);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/mymessages/folders-data.service.ts","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Transition, StateService, equals, TransitionService } from 'ui-router-core';\nimport { DialogService } from '../global/dialog.service';\nimport { AppConfigService } from '../global/app-config.service';\nimport { MessagesDataService } from './messages-data.service';\nimport { copy } from '../util/util';\n\n/**\n * This component composes a message\n *\n * The message might be new, a saved draft, or a reply/forward.\n * A Cancel button discards the new message and returns to the previous state.\n * A Save As Draft button saves the message to the \"drafts\" folder.\n * A Send button sends the message\n */\n@Component({\n  selector: 'app-compose',\n  template: `\n    <div class=\"compose\">\n      <div class=\"header\">\n        <div class=\"flex-h\"> <label>Recipient</label> <input type=\"text\" id=\"to\" name=\"to\" [(ngModel)]=\"message.to\"> </div>\n        <div class=\"flex-h\"> <label>Subject</label> <input type=\"text\" id=\"subject\" name=\"subject\" [(ngModel)]=\"message.subject\"> </div>\n      </div>\n    \n      <div class=\"body\">\n        <textarea name=\"body\" id=\"body\" [(ngModel)]=\"message.body\" cols=\"30\" rows=\"20\"></textarea>\n        \n        <div class=\"buttons\">\n          <!-- Clicking this button brings the user back to the state they came from (previous state) -->\n          <button class=\"btn btn-primary\" (click)=\"gotoPreviousState()\"><i class=\"fa fa-times-circle-o\"></i><span>Cancel</span></button>\n          <button class=\"btn btn-primary\" (click)=\"save($ctrl.message)\"><i class=\"fa fa-save\"></i><span>Save as Draft</span></button>\n          <button class=\"btn btn-primary\" (click)=\"send($ctrl.message)\"><i class=\"fa fa-paper-plane-o\"></i><span>Send</span></button>\n        </div>\n      </div>\n    </div>\n`,\n  styles: []\n})\nexport class ComposeComponent implements OnInit, OnDestroy {\n  // data\n  pristineMessage;\n  message;\n  canExit: boolean;\n  deregister: Function;\n\n  constructor(public stateService: StateService,\n              public transitionService: TransitionService,\n              public DialogService: DialogService,\n              public appConfig: AppConfigService,\n              public messagesService: MessagesDataService,\n              public transition: Transition,\n  ) { }\n\n  /**\n   * Create our message's model using the current user's email address as 'message.from'\n   * Then extend it with all the properties from (non-url) state parameter 'message'.\n   * Keep two copies: the editable one and the original one.\n   * These copies are used to check if the message is dirty.\n   */\n  ngOnInit() {\n    const messageParam = this.transition.params().message;\n    this.pristineMessage = Object.assign({from: this.appConfig.emailAddress}, messageParam);\n    this.message = copy(this.pristineMessage);\n\n    // Temporary hack until uiCanExit officially lands in ui-router-ng2 1.0.0-beta.5\n    this.deregister = this.transitionService.onStart({ exiting: 'mymessages.compose' }, () => this.uiCanExit());\n  }\n\n  ngOnDestroy() {\n    if (this.deregister) {\n      this.deregister();\n    }\n  }\n\n  /**\n   * Checks if the edited copy and the pristine copy are identical when the state is changing.\n   * If they are not identical, the allows the user to confirm navigating away without saving.\n   */\n  uiCanExit() {\n    if (this.canExit || equals(this.pristineMessage, this.message)) {\n      return Promise.resolve(true);\n    }\n\n    const message = 'You have not saved this message.';\n    const question = 'Navigate away and lose changes?';\n    return this.DialogService.confirm(message, question, 'Yes', 'No');\n  }\n\n  /**\n   * Navigates back to the previous state.\n   *\n   * - Checks the $transition$ which activated this controller for a 'from state' that isn't the implicit root state.\n   * - If there is no previous state (because the user deep-linked in, etc), then go to 'mymessages.messagelist'\n   */\n  gotoPreviousState() {\n    const transition = this.transition;\n    const hasPrevious = !!transition.from().name;\n    const state = hasPrevious ? transition.from() : 'mymessages.messagelist';\n    const params = hasPrevious ? transition.params('from') : {};\n    this.stateService.go(state, params);\n  };\n\n  /** \"Send\" the message (save to the 'sent' folder), and then go to the previous state */\n  send(message) {\n    this.messagesService.save(Object.assign(message, {date: new Date(), read: true, folder: 'sent'}))\n      .then(() => this.canExit = true)\n      .then(() => this.gotoPreviousState());\n  };\n\n  /** Save the message to the 'drafts' folder, and then go to the previous state */\n  save(message) {\n    this.messagesService.save(Object.assign(message, {date: new Date(), read: true, folder: 'drafts'}))\n      .then(() => this.canExit = true)\n      .then(() => this.gotoPreviousState());\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/mymessages/compose.component.ts","import { Component, Input } from '@angular/core';\nimport { Message } from './messages-data.service';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * This component renders a list of messages using the `messageTable` component\n */\n@Component({\n  selector: 'app-message-list',\n  template: `\n    <div class=\"messages\">\n      <app-message-table [columns]=\"folder.columns\" [messages]=\"messages$ | async\"></app-message-table>\n    </div>\n`,\n  styles: []\n})\nexport class MessageListComponent {\n  @Input() folder;\n  @Input() messages$: Observable<Message[]>;\n\n  constructor() { }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/mymessages/message-list.component.ts","import { Component, OnInit, Input } from '@angular/core';\nimport { setProp } from '../util/util';\nimport { DialogService } from '../global/dialog.service';\nimport { MessagesDataService, Message } from './messages-data.service';\nimport { StateService } from 'ui-router-core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Observable } from 'rxjs/Observable';\nimport { Folder } from './folders-data.service';\n\n/**\n * This component renders a single message\n *\n * Buttons perform actions related to the message.\n * Buttons are shown/hidden based on the folder's context.\n * For instance, a \"draft\" message can be edited, but can't be replied to.\n */\n@Component({\n  selector: 'app-message',\n  template: `\n    <div class=\"message\">\n    \n      <div class=\"header\">\n        <div>\n          <h4>{{message.subject}}</h4>\n          <h5>{{message.from}} <i class=\"fa fa-long-arrow-right\"></i> {{message.to}}</h5>\n        </div>\n    \n        <div class=\"line2\">\n          <div>{{message.date | date: 'longDate'}} {{message.date | date: 'mediumTime'}}</div>\n          <div>\n            <button class=\"btn btn-primary\" *ngIf=\"actions.edit\" (click)=\"editDraft(message)\">\n              <i class=\"fa fa-pencil\"></i> <span>Edit Draft</span>\n            </button>\n            \n            <button class=\"btn btn-primary\" *ngIf=\"actions.reply\" (click)=\"reply(message)\">\n              <i class=\"fa fa-reply\"></i> <span>Reply</span>\n            </button>\n            \n            <button class=\"btn btn-primary\" *ngIf=\"actions.forward\" (click)=\"forward(message)\">\n              <i class=\"fa fa-forward\" ></i> <span>Forward</span>\n            </button>\n            \n            <button class=\"btn btn-primary\" *ngIf=\"actions.delete\" (click)=\"remove(message)\">\n              <i class=\"fa fa-close\"></i> <span>Delete</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    \n      <!-- Pass the raw (plain text) message body through the messageBody filter to format slightly nicer. -->\n      <div class=\"body\" [innerHTML]=\"message.body | formatMessage\"></div>\n    </div>\n`,\n  styles: []\n})\nexport class MessageComponent implements OnInit {\n  @Input() folder: Folder;\n  @Input() message: Message;\n\n  // What message should be activated if this message is deleted\n  @Input() proximalMessage$: Observable<Message>;\n  private proximalMessageSub: Subscription;\n  proximalMessage: Message;\n\n  // data\n  actions;\n\n  constructor(public stateService: StateService,\n              public dialog: DialogService,\n              public messagesService: MessagesDataService\n  ) { }\n\n  /**\n   * When the user views a message, mark it as read and save (PUT) the resource.\n   *\n   * Apply the available actions for the message, depending on the folder the message belongs to.\n   */\n  ngOnInit() {\n    this.message.read = true;\n    this.messagesService.put(this.message);\n\n    this.actions = this.folder.actions.reduce((obj, action) => setProp(obj, action, true), {});\n    this.proximalMessageSub = this.proximalMessage$.subscribe(message => this.proximalMessage = message);\n  }\n\n  /**\n   * Compose a new message as a reply to this one\n   */\n  reply(message) {\n    const replyMsg = makeResponseMsg('Re: ', message);\n    this.stateService.go('mymessages.compose', { message: replyMsg });\n  };\n\n  /**\n   * Compose a new message as a forward of this one.\n   */\n  forward(message) {\n    const fwdMsg = makeResponseMsg('Fwd: ', message);\n    delete fwdMsg.to;\n    this.stateService.go('mymessages.compose', { message: fwdMsg });\n  };\n\n  /**\n   * Continue composing this (draft) message\n   */\n  editDraft(message) {\n    this.stateService.go('mymessages.compose', { message: message });\n  };\n\n  /**\n   * Delete this message.\n   *\n   * - confirm deletion\n   * - delete the message\n   * - determine which message should be active\n   * - show that message\n   */\n  remove(message) {\n    const nextMessageId = this.proximalMessage && this.proximalMessage._id;\n    const nextState = nextMessageId ? 'mymessages.messagelist.message' : 'mymessages.messagelist';\n    const params = { messageId: nextMessageId };\n\n    this.dialog.confirm('Delete?', undefined)\n      .then(() => this.messagesService.remove(message))\n      .then(() => this.stateService.go(nextState, params, { reload: 'mymessages.messagelist' }));\n  };\n}\n\n\n\n/** Helper function to prefix a message with \"fwd: \" or \"re: \" */\nconst prefixSubject = (prefix, message) => prefix + message.subject;\n/** Helper function which quotes an email message */\nconst quoteMessage = (message) => `\n\n\n\n---------------------------------------\nOriginal message:\nFrom: ${message.from}\nDate: ${message.date}\nSubject: ${message.subject}\n\n${message.body}`;\n\n/** Helper function to make a response message object */\nfunction makeResponseMsg(subjectPrefix, origMsg) {\n  return {\n    from: origMsg.to,\n    to: origMsg.from,\n    subject: prefixSubject(subjectPrefix, origMsg),\n    body: quoteMessage(origMsg)\n  };\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/mymessages/message.component.ts","import { Component, Input } from '@angular/core';\n\n/**\n * The main mymessages component.\n *\n * Renders a list of folders, and has two viewports:\n * - messageList: filled with the list of messages for a folder\n * - messagecontent: filled with the contents of a single message.\n */\n@Component({\n  selector: 'app-mymessages',\n  template: `\n    <div class=\"my-messages\">\n    \n      <!-- Show message folders -->\n      <app-folder-list [folders]=\"folders\"></app-folder-list>\n    \n      <!-- A named view for the list of messages in this folder.  This will be  filled in by the 'mymessages.messagelist' child state -->\n      <ui-view name=\"messagelist\" class=\"messagelist\"></ui-view>\n    \n    </div>\n    \n    <!-- A named ui-view for a message's contents.  The 'mymessages.messagelist.message' grandchild state plugs into this ui-view -->\n    <ui-view name=\"messagecontent\"></ui-view>\n`,\n  styles: []\n})\nexport class MymessagesComponent {\n  @Input() folders: any[];\n\n  constructor() { }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/mymessages/mymessages.component.ts","import { Component, Input } from '@angular/core';\n\n/**\n * Renders a list of folders\n */\n@Component({\n  selector: 'app-folder-list',\n  template: `\n    <!-- Renders a list of folders -->\n    <div class=\"folderlist\">\n      <ul class=\"selectlist list-unstyled\">\n        <!-- Highlight the selected folder:\n            When the current state matches the uiSref's state (and its parameters)\n            uiSrefActive applies the 'selected' class to the li element -->\n        <li class=\"folder\" uiSrefActive=\"selected\" *ngFor=\"let folder of folders\">\n          <!-- This uiSref is a relative link to the 'mymessages.messagelist' substate. It provides the\n              'folderId' parameter value from the current folder's .id property -->\n          <a uiSref=\".messagelist\" [uiParams]=\"{ folderId: folder._id }\"><i class=\"fa\"></i>{{ folder._id }}</a>\n        </li>\n      </ul>\n    </div>\n`,\n  styles: []\n})\nexport class FolderListComponent {\n  @Input() folders: any[];\n  constructor() { }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/mymessages/folder-list.component.ts","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatMessage'\n})\nexport class FormatMessagePipe implements PipeTransform {\n  transform(value: string, args?: any): string {\n    return value.split(/\\n/).map(p => `<p>${p}</p>`).join('\\n');\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/mymessages/format-message.pipe.ts","import { Component, Input } from '@angular/core';\n\n/**\n * A component that displays a folder of messages as a table\n *\n * If a row is clicked, the details of the message is shown using a relative ui-sref to `.message`.\n *\n * ui-sref-active is used to highlight the selected row.\n *\n * Shows/hides specific columns based on the `columns` input binding.\n */\n@Component({\n  selector: 'app-message-table',\n  template: `\n    <table>\n      <thead>\n        <tr>\n          <td *ngIf=\"colVisible('read')\"></td>\n          <td *ngIf=\"colVisible('from')\"    app-sort-messages prop=\"from\"    label=\"Sender\"></td>\n          <td *ngIf=\"colVisible('to')\"      app-sort-messages prop=\"to\"      label=\"Recipient\"></td>\n          <td *ngIf=\"colVisible('subject')\" app-sort-messages prop=\"subject\" label=\"Subject\"></td>\n          <td *ngIf=\"colVisible('date')\"    app-sort-messages prop=\"date\"    label=\"Date\"></td>\n        </tr>\n      </thead>\n  \n      <tbody>\n        <tr *ngFor=\"let message of messages\"\n            uiSref=\".message\" [uiParams]=\"{ messageId: message._id }\" uiSrefActive=\"active\">\n          <td *ngIf=\"colVisible('read')\"><i class=\"fa fa-circle\" style=\"font-size: 50%\" *ngIf=\"!message.read\"></i></td>\n          <td *ngIf=\"colVisible('from')\">{{ message.from }}</td>\n          <td *ngIf=\"colVisible('to')\">{{ message.to }}</td>\n          <td *ngIf=\"colVisible('subject')\">{{ message.subject }}</td>\n          <td *ngIf=\"colVisible('date')\">{{ message.date | date: \"yyyy-MM-dd\" }}</td>\n        </tr>\n      </tbody>\n  \n    </table>\n`,\n  styles: []\n})\nexport class MessageTableComponent {\n  @Input() columns: any[];\n  @Input() messages: any[];\n\n  constructor() { }\n\n  colVisible(name) {\n    return this.columns.indexOf(name) !== -1;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/mymessages/message-table.component.ts","import { ComposeComponent } from './compose.component';\nimport { MessageListComponent } from './message-list.component';\nimport { MessageComponent } from './message.component';\nimport { MymessagesComponent } from './mymessages.component';\nimport { Ng2StateDeclaration } from 'ui-router-ng2';\nimport { Transition } from 'ui-router-core';\nimport { FoldersDataService, Folder } from './folders-data.service';\nimport { MessagesDataService, Message } from './messages-data.service';\nimport { AppConfigService, SortOrder } from '../global/app-config.service';\nimport { Observable } from 'rxjs/Observable';\n\nexport function getFolders(foldersService: FoldersDataService) {\n  return foldersService.all();\n}\n\n/**\n * The mymessages state. This is the main state for the mymessages submodule.\n *\n * This state shows the list of folders for the current user. It retrieves the folders from the\n * Folders service.  If a user navigates directly to this state, the state redirects to the 'mymessages.messagelist'.\n */\nexport const mymessagesState: Ng2StateDeclaration = {\n  parent: 'app',\n  name: 'mymessages',\n  url: '/mymessages',\n  component: MymessagesComponent,\n  resolve: [\n    // All the folders are fetched from the Folders service\n    { token: 'folders', deps: [FoldersDataService], resolveFn: getFolders },\n  ],\n  // If mymessages state is directly activated, redirect the transition to the child state 'mymessages.messagelist'\n  redirectTo: 'mymessages.messagelist',\n  // Mark this state as requiring authentication.  See ../routerhooks/requiresAuth.js.\n  data: { requiresAuth: true }\n};\n\n\nexport function getFolder(foldersService: FoldersDataService, transition: Transition) {\n  return foldersService.get(transition.params().folderId);\n}\n\nexport function getMessages(messagesService: MessagesDataService, folder: Folder,\n                            appConfig: AppConfigService): Promise<Observable<Message[]>> {\n  const promise = messagesService.byFolder(folder);\n\n  return promise.then(messages => appConfig.sort$.map(sortOrder =>\n    MessagesDataService.sortedMessages(messages, sortOrder)\n  ));\n}\n\n/**\n * This state shows the contents (a message list) of a single folder\n */\nexport const messageListState = {\n  name: 'mymessages.messagelist',\n  url: '/:folderId',\n  // The folderId parameter is part of the URL.  This params block sets 'inbox' as the default value.\n  // If no parameter value for folderId is provided on the transition, then it will be defaulted to 'inbox'\n  params: { folderId: 'inbox' },\n  views: {\n    // This targets the \"messagelist\" named ui-view added to the DOM in the parent state 'mymessages'\n    messagelist: { component: MessageListComponent },\n  },\n  resolve: [\n    // Fetch the current folder from the Folders service, using the folderId parameter\n    { token: 'folder', deps: [FoldersDataService, Transition], resolveFn: getFolder },\n\n    // The folder object (from the resolve above) is injected into this resolve\n    // The list of message for the folder are fetched from the Messages service\n    { token: 'messages$', deps: [MessagesDataService, 'folder', AppConfigService], resolveFn: getMessages },\n  ],\n};\n\n\nexport function getMessage(messagesService: MessagesDataService, transition: Transition) {\n  return messagesService.get(transition.params().messageId);\n}\n\nexport function getProximalMessage(messages$, message) {\n  return messages$.map(messages => {\n    const curIdx = messages.indexOf(message);\n    const nextIdx = curIdx === messages.length ? curIdx - 1 : curIdx + 1;\n    return messages[nextIdx];\n  });\n}\n\n/**\n * This state shows the contents of a single message.\n * It also has UI to reply, forward, delete, or edit an existing draft.\n */\nexport const messageState: Ng2StateDeclaration = {\n  name: 'mymessages.messagelist.message',\n  url: '/:messageId',\n  views: {\n    // Relatively target the parent-state's parent-state's 'messagecontent' ui-view\n    // This could also have been written using ui-view@state addressing: 'messagecontent@mymessages'\n    // Or, this could also have been written using absolute ui-view addressing: '!$default.$default.messagecontent'\n    '^.^.messagecontent': { component: MessageComponent },\n  },\n  resolve: [\n    // Fetch the message from the Messages service using the messageId parameter\n    { token: 'message', deps: [MessagesDataService, Transition], resolveFn: getMessage },\n\n    // Provide the component with the next closest message to activate if the current message is deleted\n    { token: 'proximalMessage$', deps: ['messages$', 'message'], resolveFn: getProximalMessage }\n  ],\n};\n\n\n/**\n * This state allows the user to compose a new message, edit a drafted message, send a message,\n * or save an unsent message as a draft.\n *\n * This state uses view-targeting to take over the ui-view that would normally be filled by the 'mymessages' state.\n */\nexport const composeState: Ng2StateDeclaration = {\n  name: 'mymessages.compose',\n  url: '/compose',\n  views: {\n    // Absolutely targets the $default (unnamed) ui-view, two nesting levels down with the composeComponent.\n    '!$default.$default': { component: ComposeComponent }\n  },\n  // Declares that this state has a 'message' parameter, that defaults to an empty object.\n  // Note the parameter does not appear in the URL.\n  params: {\n    message: {}\n  },\n};\n\nexport const MYMESSAGES_STATES = [\n  mymessagesState,\n  messageListState,\n  messageState,\n  composeState,\n];\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/mymessages/mymessages.states.ts","import { Component, OnInit, Input, HostListener, OnDestroy } from '@angular/core';\nimport { AppConfigService } from '../global/app-config.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n/**\n * A directive (for a table header) which changes the app's sort order\n */\n@Component({\n  selector: '[app-sort-messages]',\n  template: `\n    <i style='padding-left: 0.25em' \n      class='fa' \n      [class.fa-sort-asc]=\"asc\" \n      [class.fa-sort-desc]=\"desc\"\n    ></i>{{ label }}\n`,\n  styles: []\n})\nexport class SortMessagesComponent implements OnInit, OnDestroy {\n  @Input('prop') prop: string;\n  @Input('label') label: string;\n  private _sub: Subscription;\n  public asc: boolean;\n  public desc: boolean;\n\n  constructor(private appConfig: AppConfigService) { }\n\n  ngOnInit() {\n    this._sub = this.appConfig.sort$.subscribe(() => this.update());\n  }\n\n  ngOnDestroy() {\n    this._sub.unsubscribe();\n  }\n\n  update() {\n    const sort = this.appConfig.sort$.value;\n    const matches = sort.sortBy === this.prop;\n    this.asc = matches && sort.order < 0;\n    this.desc = matches && sort.order > 0;\n  }\n\n  @HostListener('click', ['$event'])\n  onClick(e) {\n    this.appConfig.sort = (this.asc ? '+' : '-') + this.prop;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/mymessages/sort-messages.component.ts"],"sourceRoot":""}
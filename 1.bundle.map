{"version":3,"sources":["webpack:///./src/app/contacts/contacts.module.ts","webpack:///./src/app/util/sessionStorage.ts?1387","webpack:///./src/app/contacts/contacts-data.service.ts","webpack:///./src/app/contacts/contact.component.ts","webpack:///./src/app/contacts/contacts.component.ts","webpack:///./src/app/contacts/edit-contact.component.ts","webpack:///./src/app/contacts/contact-detail.component.ts","webpack:///./src/app/contacts/contact-list.component.ts","webpack:///./src/app/contacts/contacts.states.ts"],"names":[],"mappings":"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","file":"1.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ContactComponent } from './contact.component';\nimport { ContactDetailComponent } from './contact-detail.component';\nimport { ContactListComponent } from './contact-list.component';\nimport { ContactsComponent } from './contacts.component';\nimport { EditContactComponent } from './edit-contact.component';\nimport { CONTACTS_STATES } from './contacts.states';\nimport { UIRouterModule } from 'ui-router-ng2';\nimport { FormsModule } from '@angular/forms';\nimport { ContactsDataService } from './contacts-data.service';\n\n@NgModule({\n  imports: [\n    UIRouterModule.forChild({ states: CONTACTS_STATES }),\n    FormsModule,\n    CommonModule\n  ],\n  declarations: [\n    ContactComponent,\n    ContactDetailComponent,\n    ContactListComponent,\n    ContactsComponent,\n    EditContactComponent\n  ],\n  providers: [\n    ContactsDataService\n  ],\n})\nexport class ContactsModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/contacts/contacts.module.ts","import { pushToArr, guid, wait } from './util';\nimport { AppConfigService } from '../global/app-config.service';\n\n/**\n * This class simulates a RESTful resource, but the API calls fetch data from\n * Session Storage instead of an HTTP call.\n *\n * Once configured, it loads the initial (pristine) data from the URL provided (using HTTP).\n * It exposes GET/PUT/POST/DELETE-like API that operates on the data.  All the data is also\n * stored in Session Storage.  If any data is modified in memory, session storage is updated.\n * If the browser is refreshed, the SessionStorage object will try to fetch the existing data from\n * the session, before falling back to re-fetching the initial data using HTTP.\n *\n * For an example, please see dataSources.js\n */\nexport class SessionStorage<T> {\n  // data\n  _data: Promise<T[]>;\n  _idProp: string;\n  _eqFn: (a: T, b: T) => boolean;\n\n  /**\n   * Creates a new SessionStorage object\n   *\n   * @param sessionStorageKey The session storage key. The data will be stored in browser's session storage under this key.\n   * @param sourceUrl The url that contains the initial data.\n   * @param appConfig Pass in the AppConfig object\n   */\n  constructor(public sessionStorageKey, sourceUrl, public appConfig: AppConfigService) {\n    let data;\n    const fromSession = sessionStorage.getItem(sessionStorageKey);\n    // A promise for *all* of the data.\n    this._data = undefined;\n\n    // For each data object, the _idProp defines which property has that object's unique identifier\n    this._idProp = '_id';\n\n    // A basic triple-equals equality checker for two values\n    this._eqFn = (l, r) => l[this._idProp] === r[this._idProp];\n\n    if (fromSession) {\n      try {\n        // Try to parse the existing data from the Session Storage API\n        data = JSON.parse(fromSession);\n      } catch (e) {\n        console.log('Unable to parse session messages, retrieving intial data.');\n      }\n    }\n\n    // Create a promise for the data; Either the existing data from session storage, or the initial data via $http request\n    this._data = (data ? Promise.resolve(data) : fetch(sourceUrl)\n        .then(resp => resp.json()))\n        .then(this._commit.bind(this))\n        .then(() => JSON.parse(sessionStorage.getItem(sessionStorageKey)));\n  }\n\n  /** Saves all the data back to the session storage */\n  _commit(data: T[]): Promise<T[]> {\n    sessionStorage.setItem(this.sessionStorageKey, JSON.stringify(data));\n    return Promise.resolve(data);\n  }\n\n  /** Helper which simulates a delay, then provides the `thenFn` with the data */\n  all(): Promise<T[]> {\n    const delay = this.appConfig.restDelay;\n    return wait(delay).then(() => this._data);\n  }\n\n  /** Given a sample item, returns a promise for all the data for items which have the same properties as the sample */\n  search(exampleItem): Promise<T[]> {\n    const contains = (search, inString) =>\n        ('' + inString).indexOf('' + search) !== -1;\n    const matchesExample = (example, item) =>\n        Object.keys(example).reduce((memo, key) => memo && contains(example[key], item[key]), true);\n    return this.all().then(items =>\n        items.filter(matchesExample.bind(null, exampleItem)));\n  }\n\n  /** Returns a promise for the item with the given identifier */\n  get(id): Promise<T> {\n    return this.all().then(items =>\n        items.find(item => item[this._idProp] === id));\n  }\n\n  /** Returns a promise to save the item.  It delegates to put() or post() if the object has or does not have an identifier set */\n  save(item: T): Promise<T>  {\n    return item[this._idProp] ? this.put(item) : this.post(item);\n  }\n\n  /** Returns a promise to save (POST) a new item.   The item's identifier is auto-assigned. */\n  post(item: T): Promise<T> {\n    item[this._idProp] = guid();\n    return this.all()\n      .then(items => pushToArr(items, item))\n      .then(this._commit.bind(this))\n      .then(() => item);\n  }\n\n  /** Returns a promise to save (PUT) an existing item. */\n  put(item: T, eqFn = this._eqFn): Promise<T> {\n    return this.all().then(items => {\n      const idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) {\n        throw Error(`${item} not found in ${this}`);\n      }\n      items[idx] = item;\n      return this._commit(items).then(() => item);\n    });\n  }\n\n  /** Returns a promise to remove (DELETE) an item. */\n  remove(item, eqFn = this._eqFn): Promise<T> {\n    return this.all().then(items => {\n      const idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) {\n        throw Error(`${item} not found in ${this}`);\n      }\n      items.splice(idx, 1);\n      return this._commit(items).then(() => item);\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/util/sessionStorage.ts","import { AppConfigService } from '../global/app-config.service';\nimport { Injectable } from '@angular/core';\nimport { SessionStorage } from '../util/sessionStorage';\n\nexport interface Contact {\n  tags: any[];\n  address: {\n    zip: number;\n    state: string;\n    city: string;\n    street: string;\n  };\n  phone: string;\n  email: string;\n  company: string;\n  age: number;\n  picture: string;\n  _id: string;\n  name: {\n    last: string;\n    first: string\n  };\n}\n\n/** A fake Contacts REST client API */\n@Injectable()\nexport class ContactsDataService extends SessionStorage<Contact> {\n  constructor(appConfig: AppConfigService) {\n    // http://beta.json-generator.com/api/json/get/V1g6UwwGx\n    super('contacts', 'assets/contacts.json', appConfig);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/contacts/contacts-data.service.ts","import { Component, Input } from '@angular/core';\n\n/**\n * This component renders details for a single contact\n *\n * A button messages the contact by linking to `mymessages.compose` state passing the email as a state parameter.\n * Another button edits the contact by linking to `contacts.contact.edit` state.\n */\n@Component({\n  selector: 'app-contact',\n  template: `\n    <div class=\"contact\">\n      <app-contact-detail [contact]=\"contact\"></app-contact-detail>\n    \n      <!-- This button has an ui-sref to the mymessages.compose state. The ui-sref provides the mymessages.compose\n           state with an non-url parameter, which is used as the initial message model -->\n      <button class=\"btn btn-primary\" uiSref=\"mymessages.compose\" [uiParams]=\"{ message: { to: contact.email } }\">\n        <i class=\"fa fa-envelope\"></i><span>Message</span>\n      </button>\n    \n      <!-- This button has a relative ui-sref to the contacts.contact.edit state. -->\n      <button class=\"btn btn-primary\" uiSref=\".edit\">\n        <i class=\"fa fa-pencil\"></i><span>Edit Contact</span>\n      </button>\n      <ui-view></ui-view>\n    </div>\n`,\n  styles: []\n})\nexport class ContactComponent {\n  @Input() contact;\n  constructor() { }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/contacts/contact.component.ts","import { Component, Input } from '@angular/core';\n\n/**\n * This component renders the contacts submodule.\n *\n * On the left is the list of contacts.\n * On the right is the ui-view viewport where contact details appear.\n */\n@Component({\n  selector: 'app-contacts',\n  template: `\n    <div class=\"my-contacts flex-h\">\n    \n      <app-contact-list [contacts]=\"contacts\" class=\"flex nogrow\"></app-contact-list>\n    \n      <ui-view>\n        <!-- This default content is displayed when the ui-view is not filled in by a child state -->\n        <h4 style=\"margin: 1em 2em;\">Select a contact</h4>\n      </ui-view>\n    </div>\n`,\n  styles: []\n})\nexport class ContactsComponent {\n  @Input() contacts;\n  constructor() { }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/contacts/contacts.component.ts","import { Component, OnInit, Input, Inject, OnDestroy } from '@angular/core';\nimport { StateService, TransitionService, equals, StateDeclaration } from 'ui-router-core';\nimport { DialogService } from '../global/dialog.service';\nimport { ContactsDataService } from './contacts-data.service';\nimport { copy } from '../util/util';\n\n/**\n * The EditContact component\n *\n * This component is used by both `contacts.contact.edit` and `contacts.new` states.\n *\n * The component makes a copy of the contqct data for editing.\n * The new copy and original (pristine) copy are used to determine if the contact is \"dirty\" or not.\n * If the user navigates to some other state while the contact is \"dirty\", the `uiCanExit` component\n * hook asks the user to confirm navigation away, losing any edits.\n *\n * The Delete Contact button is wired to the `remove` method, which:\n * - asks for confirmation from the user\n * - deletes the resource from REST API\n * - navigates back to the contacts grandparent state using relative addressing `^.^`\n *   the `reload: true` option re-fetches the contacts list from the server\n *\n * The Save Contact button is wired to the `save` method which:\n * - saves the REST resource (PUT or POST, depending)\n * - navigates back to the parent state using relative addressing `^`.\n *   when editing an existing contact, this returns to the `contacts.contact` \"view contact\" state\n *   when creating a new contact, this returns to the `contacts` list.\n *   the `reload: true` option re-fetches the contacts resolve data from the server\n */\n@Component({\n  selector: 'app-edit-contact',\n  template: `\n    <div class=\"contact\">\n      <div class=\"details\">\n        <div><label>First</label><input type=\"text\" [(ngModel)]=\"contact.name.first\"></div>\n        <div><label>Last</label><input type=\"text\" [(ngModel)]=\"contact.name.last\"></div>\n        <div><label>Company</label><input type=\"text\" [(ngModel)]=\"contact.company\"></div>\n        <div><label>Age</label><input type=\"text\" [(ngModel)]=\"contact.age\"></div>\n        <div><label>Phone</label><input type=\"text\" [(ngModel)]=\"contact.phone\"></div>\n        <div><label>Email</label><input type=\"text\" [(ngModel)]=\"contact.email\"></div>\n        <div><label>Street</label><input type=\"text\" [(ngModel)]=\"contact.address.street\"></div>\n        <div><label>City</label><input type=\"text\" [(ngModel)]=\"contact.address.city\"> </div>\n        <div><label>State</label><input type=\"text\" [(ngModel)]=\"contact.address.state\"></div>\n        <div><label>Zip</label><input type=\"text\" [(ngModel)]=\"contact.address.zip\"></div>\n        <div><label>Image</label><input type=\"text\" [(ngModel)]=\"contact.picture\"></div>\n      </div>\n    \n      <hr>\n    \n      <div>\n        <!-- This button's ui-sref relatively targets the parent state, i.e., contacts.contact -->\n        <button class=\"btn btn-primary\" uiSref=\"^\"><i class=\"fa fa-close\"></i><span>Cancel</span></button>\n        <button class=\"btn btn-primary\" (click)=\"save(contact)\"><i class=\"fa fa-save\"></i><span>Save</span></button>\n        <button class=\"btn btn-primary\" (click)=\"remove(contact)\"><i class=\"fa fa-close\"></i><span>Delete</span></button>\n      </div>\n    </div>\n`,\n  styles: []\n})\nexport class EditContactComponent implements OnInit, OnDestroy {\n  @Input() pristineContact;\n  contact;\n  deregister: Function;\n  canExit: boolean;\n\n  constructor(public $state: StateService,\n              public dialogService: DialogService,\n              public contactsService: ContactsDataService,\n              // The state that is routing to the component, which could\n              // be either contacts.new or contacts.contact.edit\n              @Inject('$state$') public $state$: StateDeclaration,\n              public transitionService: TransitionService) {\n  }\n\n  ngOnInit() {\n    // Make an editable copy of the pristineContact\n    this.contact = copy(this.pristineContact);\n    // Hack until official support for uiCanExit lands in ui-router-ng2 1.0.0-beta.5\n    this.deregister = this.transitionService.onStart({ exiting: this.$state$.name }, () => this.uiCanExit());\n  }\n\n  ngOnDestroy() {\n    if (this.deregister) {\n      this.deregister();\n    }\n  }\n\n  uiCanExit() {\n    if (this.canExit || equals(this.contact, this.pristineContact)) {\n      return Promise.resolve(true);\n    }\n\n    const message = 'You have unsaved changes to this contact.';\n    const question = 'Navigate away and lose changes?';\n    return this.dialogService.confirm(message, question)\n      ;\n  }\n\n  /** Ask for confirmation, then delete the contact, then go to the grandparent state ('contacts') */\n  remove(contact) {\n    this.dialogService.confirm(`Delete contact: ${contact.name.first} ${contact.name.last}`)\n      .then(() => this.contactsService.remove(contact))\n      .then(() => this.canExit = true)\n      .then(() => this.$state.go('^.^', null, { reload: true }));\n  }\n\n  /** Save the contact, then go to the parent state (either 'contacts' or 'contacts.contact') */\n  save(contact) {\n    this.contactsService.save(contact)\n      .then(() => this.canExit = true)\n      .then(() => this.$state.go('^', null, { reload: true }));\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/contacts/edit-contact.component.ts","import { Component, Input } from '@angular/core';\n\n/**\n * This component renders a read only view of the details for a single contact.\n */\n@Component({\n  selector: 'app-contact-detail',\n  template: `\n  <div class=\"flex-h\">\n    <div class=\"details\">\n      <h3>{{contact.name.first}} {{contact.name.last}}</h3>\n      <div><label>Company</label><div>{{contact.company}}</div></div>\n      <div><label>Age</label><div>{{contact.age}}</div></div>\n      <div><label>Phone</label><div>{{contact.phone}}</div></div>\n      <div><label>Email</label><div>{{contact.email}}</div></div>\n      <div class=\"flex-h\">\n        <label>Address</label>\n        <div>{{contact.address.street}}<br>\n              {{contact.address.city}}, {{contact.address.state}} {{contact.address.zip}}\n        </div>\n      </div>\n    </div>\n\n    <div class=\"flex nogrow\">\n      <img [src]=\"contact.picture\"/>\n    </div>\n  </div>\n`\n  ,\n  styles: []\n})\nexport class ContactDetailComponent {\n  @Input() contact;\n  constructor() { }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/contacts/contact-detail.component.ts","import { Component, Input } from '@angular/core';\n\n/**\n * This component renders a list of contacts.\n *\n * At the top is a \"new contact\" button.\n * Each list item is a clickable link to the `contacts.contact` details substate\n */\n@Component({\n  selector: 'app-contact-list',\n  template: `\n  <ul class=\"selectlist list-unstyled\">\n    <li>\n      <!-- This link is a relative ui-sref to the contacts.new state. -->\n      <a uiSref=\".new\">\n        <button class=\"btn btn-primary\">\n          <i class=\"fa fa-pencil\"></i><span>New Contact</span>\n        </button>\n      </a>\n    </li>\n\n    <li>&nbsp;</li>\n\n    <!-- Highlight the selected contact:\n        When the current state matches the ui-sref's state (and its parameters)\n        ui-sref-active applies the 'selected' class to the li element -->\n    <li *ngFor=\"let contact of contacts\" >\n      <a uiSref=\".contact\" [uiParams]=\"{contactId: contact._id}\" uiSrefActive=\"selected\">\n        {{contact.name.first}} {{contact.name.last}}\n      </a>\n    </li>\n  </ul>\n`,\n  styles: []\n})\nexport class ContactListComponent {\n  @Input() contacts;\n  constructor() { }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/contacts/contact-list.component.ts","import {Ng2StateDeclaration} from 'ui-router-ng2';\n\nimport {ContactComponent} from './contact.component';\nimport {ContactsComponent} from './contacts.component';\nimport {EditContactComponent} from './edit-contact.component';\nimport { ContactsDataService } from './contacts-data.service';\nimport { Transition } from 'ui-router-core';\n\n\nexport function getAllContacts(contactSvc) {\n  return contactSvc.all();\n}\n\n/**\n * This state displays the contact list.\n * It also provides a nested ui-view (viewport) for child states to fill in.\n *\n * The contacts are fetched using a resolve.\n */\nexport const contactsState: Ng2StateDeclaration = {\n  parent: 'app', // declares that 'contacts' is a child of 'app'\n  name: 'contacts',\n  url: '/contacts',\n  component: ContactsComponent,\n  resolve: [\n    // Resolve all the contacts.  The resolved contacts are injected into the controller.\n    { token: 'contacts', deps: [ContactsDataService], resolveFn: getAllContacts },\n  ],\n  data: { requiresAuth: true },\n};\n\n\nexport function getOneContact (contactSvc, $transition$) {\n  return contactSvc.get($transition$.params().contactId);\n}\n\n/**\n * This state displays a single contact.\n * The contact to display is fetched using a resolve, based on the `contactId` parameter.\n */\nexport const viewContactState: Ng2StateDeclaration = {\n  name: 'contacts.contact',\n  url: '/:contactId',\n  component: ContactComponent,\n  resolve: [\n    // Resolve the contact, based on the contactId parameter value.\n    // The resolved contact is provided to the contactComponent's contact binding\n    { token: 'contact', deps: [ContactsDataService, Transition], resolveFn: getOneContact },\n  ],\n};\n\n\n/**\n * This state allows a user to edit a contact\n *\n * The contact data to edit is injected from the parent state's resolve.\n *\n * This state uses view targeting to replace the parent ui-view (which would normally be filled\n * by 'contacts.contact') with the edit contact template/controller\n */\nexport const editContactState: Ng2StateDeclaration = {\n  name: 'contacts.contact.edit',\n  url: '/edit',\n  views: {\n    // Relatively target the grand-parent-state's $default (unnamed) ui-view\n    // This could also have been written using ui-view@state addressing: $default@contacts\n    // Or, this could also have been written using absolute ui-view addressing: !$default.$default.$default\n    '^.^.$default': {\n      bindings: { pristineContact: 'contact' },\n      component: EditContactComponent,\n    }\n  },\n};\n\n\nexport function getBlankContact() {\n  return { name: {}, address: {} };\n}\n\n/**\n * This state allows a user to create a new contact\n *\n * The contact data to edit is injected into the component from the parent state's resolve.\n */\nexport const newContactState: Ng2StateDeclaration = {\n  name: 'contacts.new',\n  url: '/new',\n  component: EditContactComponent,\n  resolve: [\n    { token: 'pristineContact', deps: [], resolveFn: getBlankContact }\n  ],\n};\n\nexport const CONTACTS_STATES = [\n  contactsState,\n  viewContactState,\n  editContactState,\n  newContactState,\n];\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/contacts/contacts.states.ts"],"sourceRoot":""}
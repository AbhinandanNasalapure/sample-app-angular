{"version":3,"sources":["/Users/cthielen/projects/uirouter/sample-app-angular/src/app/util/sessionStorage.ts"],"names":[],"mappings":"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","file":"common.chunk.js","sourcesContent":["import { pushToArr, guid, wait } from './util';\nimport { AppConfigService } from '../global/app-config.service';\n\n/**\n * This class simulates a RESTful resource, but the API calls fetch data from\n * Session Storage instead of an HTTP call.\n *\n * Once configured, it loads the initial (pristine) data from the URL provided (using HTTP).\n * It exposes GET/PUT/POST/DELETE-like API that operates on the data.  All the data is also\n * stored in Session Storage.  If any data is modified in memory, session storage is updated.\n * If the browser is refreshed, the SessionStorage object will try to fetch the existing data from\n * the session, before falling back to re-fetching the initial data using HTTP.\n *\n * For an example, please see dataSources.js\n */\nexport class SessionStorage<T> {\n  // data\n  _data: Promise<T[]>;\n  _idProp: string;\n  _eqFn: (a: T, b: T) => boolean;\n\n  /**\n   * Creates a new SessionStorage object\n   *\n   * @param sessionStorageKey The session storage key. The data will be stored in browser's session storage under this key.\n   * @param sourceUrl The url that contains the initial data.\n   * @param appConfig Pass in the AppConfig object\n   */\n  constructor(public sessionStorageKey, sourceUrl, public appConfig: AppConfigService) {\n    let data;\n    const fromSession = sessionStorage.getItem(sessionStorageKey);\n    // A promise for *all* of the data.\n    this._data = undefined;\n\n    // For each data object, the _idProp defines which property has that object's unique identifier\n    this._idProp = '_id';\n\n    // A basic triple-equals equality checker for two values\n    this._eqFn = (l, r) => l[this._idProp] === r[this._idProp];\n\n    if (fromSession) {\n      try {\n        // Try to parse the existing data from the Session Storage API\n        data = JSON.parse(fromSession);\n      } catch (e) {\n        console.log('Unable to parse session messages, retrieving intial data.');\n      }\n    }\n\n    // Create a promise for the data; Either the existing data from session storage, or the initial data via $http request\n    this._data = (data ? Promise.resolve(data) : fetch(sourceUrl)\n        .then(resp => resp.json()))\n        .then(this._commit.bind(this))\n        .then(() => JSON.parse(sessionStorage.getItem(sessionStorageKey)));\n  }\n\n  /** Saves all the data back to the session storage */\n  _commit(data: T[]): Promise<T[]> {\n    sessionStorage.setItem(this.sessionStorageKey, JSON.stringify(data));\n    return Promise.resolve(data);\n  }\n\n  /** Helper which simulates a delay, then provides the `thenFn` with the data */\n  all(): Promise<T[]> {\n    const delay = this.appConfig.restDelay;\n    return wait(delay).then(() => this._data);\n  }\n\n  /** Given a sample item, returns a promise for all the data for items which have the same properties as the sample */\n  search(exampleItem): Promise<T[]> {\n    const contains = (search, inString) =>\n        ('' + inString).indexOf('' + search) !== -1;\n    const matchesExample = (example, item) =>\n        Object.keys(example).reduce((memo, key) => memo && contains(example[key], item[key]), true);\n    return this.all().then(items =>\n        items.filter(matchesExample.bind(null, exampleItem)));\n  }\n\n  /** Returns a promise for the item with the given identifier */\n  get(id): Promise<T> {\n    return this.all().then(items =>\n        items.find(item => item[this._idProp] === id));\n  }\n\n  /** Returns a promise to save the item.  It delegates to put() or post() if the object has or does not have an identifier set */\n  save(item: T): Promise<T>  {\n    return item[this._idProp] ? this.put(item) : this.post(item);\n  }\n\n  /** Returns a promise to save (POST) a new item.   The item's identifier is auto-assigned. */\n  post(item: T): Promise<T> {\n    item[this._idProp] = guid();\n    return this.all()\n      .then(items => pushToArr(items, item))\n      .then(this._commit.bind(this))\n      .then(() => item);\n  }\n\n  /** Returns a promise to save (PUT) an existing item. */\n  put(item: T, eqFn = this._eqFn): Promise<T> {\n    return this.all().then(items => {\n      const idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) {\n        throw Error(`${item} not found in ${this}`);\n      }\n      items[idx] = item;\n      return this._commit(items).then(() => item);\n    });\n  }\n\n  /** Returns a promise to remove (DELETE) an item. */\n  remove(item: T, eqFn = this._eqFn): Promise<T> {\n    return this.all().then(items => {\n      const idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) {\n        throw Error(`${item} not found in ${this}`);\n      }\n      items.splice(idx, 1);\n      return this._commit(items).then(() => item);\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/cthielen/projects/uirouter/sample-app-angular/src/app/util/sessionStorage.ts"],"sourceRoot":"webpack:///"}
{"version":3,"sources":["/Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/compose.component.ts","/Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/folder-list.component.ts","/Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/folders-data.service.ts","/Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/format-message.pipe.ts","/Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/message-list.component.ts","/Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/message-table.component.ts","/Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/message.component.ts","/Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/messages-data.service.ts","/Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/mymessages.component.ts","/Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/mymessages.module.ts","/Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/mymessages.states.ts","/Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/sort-messages.component.ts"],"names":[],"mappings":"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","file":"mymessages.module.chunk.js","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Transition, StateService, equals, TransitionService } from '@uirouter/core';\nimport { DialogService } from '../global/dialog.service';\nimport { AppConfigService } from '../global/app-config.service';\nimport { MessagesDataService } from './messages-data.service';\nimport { copy } from '../util/util';\n\n/**\n * This component composes a message\n *\n * The message might be new, a saved draft, or a reply/forward.\n * A Cancel button discards the new message and returns to the previous state.\n * A Save As Draft button saves the message to the \"drafts\" folder.\n * A Send button sends the message\n */\n@Component({\n  selector: 'app-compose',\n  template: `\n    <div class=\"compose\">\n      <div class=\"header\">\n        <div class=\"flex-h\"> <label>Recipient</label> <input type=\"text\" id=\"to\" name=\"to\" [(ngModel)]=\"message.to\"> </div>\n        <div class=\"flex-h\"> <label>Subject</label> <input type=\"text\" id=\"subject\" name=\"subject\" [(ngModel)]=\"message.subject\"> </div>\n      </div>\n    \n      <div class=\"body\">\n        <textarea name=\"body\" id=\"body\" [(ngModel)]=\"message.body\" cols=\"30\" rows=\"20\"></textarea>\n        \n        <div class=\"buttons\">\n          <!-- Clicking this button brings the user back to the state they came from (previous state) -->\n          <button class=\"btn btn-primary\" (click)=\"gotoPreviousState()\"><i class=\"fa fa-times-circle-o\"></i><span>Cancel</span></button>\n          <button class=\"btn btn-primary\" (click)=\"save(message)\"><i class=\"fa fa-save\"></i><span>Save as Draft</span></button>\n          <button class=\"btn btn-primary\" (click)=\"send(message)\"><i class=\"fa fa-paper-plane-o\"></i><span>Send</span></button>\n        </div>\n      </div>\n    </div>\n`,\n  styles: []\n})\nexport class ComposeComponent implements OnInit {\n  // data\n  pristineMessage;\n  message;\n  canExit: boolean;\n\n  constructor(public stateService: StateService,\n              public transitionService: TransitionService,\n              public DialogService: DialogService,\n              public appConfig: AppConfigService,\n              public messagesService: MessagesDataService,\n              public transition: Transition,\n  ) { }\n\n  /**\n   * Create our message's model using the current user's email address as 'message.from'\n   * Then extend it with all the properties from (non-url) state parameter 'message'.\n   * Keep two copies: the editable one and the original one.\n   * These copies are used to check if the message is dirty.\n   */\n  ngOnInit() {\n    const messageParam = this.transition.params().message;\n    this.pristineMessage = Object.assign({from: this.appConfig.emailAddress}, messageParam);\n    this.message = copy(this.pristineMessage);\n  }\n\n  /**\n   * Checks if the edited copy and the pristine copy are identical when the state is changing.\n   * If they are not identical, the allows the user to confirm navigating away without saving.\n   */\n  uiCanExit() {\n    if (this.canExit || equals(this.pristineMessage, this.message)) {\n      return true;\n    }\n\n    const message = 'You have not saved this message.';\n    const question = 'Navigate away and lose changes?';\n    return this.DialogService.confirm(message, question, 'Yes', 'No');\n  }\n\n  /**\n   * Navigates back to the previous state.\n   *\n   * - Checks the $transition$ which activated this controller for a 'from state' that isn't the implicit root state.\n   * - If there is no previous state (because the user deep-linked in, etc), then go to 'mymessages.messagelist'\n   */\n  gotoPreviousState() {\n    const transition = this.transition;\n    const hasPrevious = !!transition.from().name;\n    const state = hasPrevious ? transition.from() : 'mymessages.messagelist';\n    const params = hasPrevious ? transition.params('from') : {};\n    this.stateService.go(state, params);\n  };\n\n  /** \"Send\" the message (save to the 'sent' folder), and then go to the previous state */\n  send(message) {\n    this.messagesService.save(Object.assign(message, {date: new Date(), read: true, folder: 'sent'}))\n      .then(() => this.canExit = true)\n      .then(() => this.gotoPreviousState());\n  };\n\n  /** Save the message to the 'drafts' folder, and then go to the previous state */\n  save(message) {\n    this.messagesService.save(Object.assign(message, {date: new Date(), read: true, folder: 'drafts'}))\n      .then(() => this.canExit = true)\n      .then(() => this.gotoPreviousState());\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/compose.component.ts","import { Component, Input } from '@angular/core';\n\n/**\n * Renders a list of folders\n */\n@Component({\n  selector: 'app-folder-list',\n  template: `\n    <!-- Renders a list of folders -->\n    <div class=\"folderlist\">\n      <ul class=\"selectlist list-unstyled\">\n        <!-- Highlight the selected folder:\n            When the current state matches the uiSref's state (and its parameters)\n            uiSrefActive applies the 'selected' class to the li element -->\n        <li class=\"folder\" uiSrefActive=\"selected\" *ngFor=\"let folder of folders\">\n          <!-- This uiSref is a relative link to the 'mymessages.messagelist' substate. It provides the\n              'folderId' parameter value from the current folder's .id property -->\n          <a uiSref=\".messagelist\" [uiParams]=\"{ folderId: folder._id }\"><i class=\"fa\"></i>{{ folder._id }}</a>\n        </li>\n      </ul>\n    </div>\n`,\n  styles: []\n})\nexport class FolderListComponent {\n  @Input() folders: any[];\n  constructor() { }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/folder-list.component.ts","import { Injectable } from '@angular/core';\nimport { SessionStorage } from '../util/sessionStorage';\nimport { AppConfigService } from '../global/app-config.service';\nimport { Folder } from './interface';\n\n/** A fake REST client API for Folders resources */\n@Injectable()\nexport class FoldersDataService extends SessionStorage<Folder> {\n  constructor(appConfig: AppConfigService) {\n    super('folders', 'assets/folders.json', appConfig);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/folders-data.service.ts","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatMessage'\n})\nexport class FormatMessagePipe implements PipeTransform {\n  transform(value: string, args?: any): string {\n    return value.split(/\\n/).map(p => `<p>${p}</p>`).join('\\n');\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// /Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/format-message.pipe.ts","import { Component, Input } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Message } from './interface';\n\n/**\n * This component renders a list of messages using the `messageTable` component\n */\n@Component({\n  selector: 'app-message-list',\n  template: `\n    <div class=\"messages\">\n      <app-message-table [columns]=\"folder.columns\" [messages]=\"messages$ | async\"></app-message-table>\n    </div>\n`,\n  styles: []\n})\nexport class MessageListComponent {\n  @Input() folder;\n  @Input() messages$: Observable<Message[]>;\n\n  constructor() { }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/message-list.component.ts","import { Component, Input } from '@angular/core';\n\n/**\n * A component that displays a folder of messages as a table\n *\n * If a row is clicked, the details of the message is shown using a relative ui-sref to `.message`.\n *\n * ui-sref-active is used to highlight the selected row.\n *\n * Shows/hides specific columns based on the `columns` input binding.\n */\n@Component({\n  selector: 'app-message-table',\n  template: `\n    <table>\n      <thead>\n        <tr>\n          <td *ngIf=\"colVisible('read')\"></td>\n          <td *ngIf=\"colVisible('from')\"    app-sort-messages prop=\"from\"    label=\"Sender\"></td>\n          <td *ngIf=\"colVisible('to')\"      app-sort-messages prop=\"to\"      label=\"Recipient\"></td>\n          <td *ngIf=\"colVisible('subject')\" app-sort-messages prop=\"subject\" label=\"Subject\"></td>\n          <td *ngIf=\"colVisible('date')\"    app-sort-messages prop=\"date\"    label=\"Date\"></td>\n        </tr>\n      </thead>\n  \n      <tbody>\n        <tr *ngFor=\"let message of messages\"\n            uiSref=\".message\" [uiParams]=\"{ messageId: message._id }\" uiSrefActive=\"active\">\n          <td *ngIf=\"colVisible('read')\"><i class=\"fa fa-circle\" style=\"font-size: 50%\" *ngIf=\"!message.read\"></i></td>\n          <td *ngIf=\"colVisible('from')\">{{ message.from }}</td>\n          <td *ngIf=\"colVisible('to')\">{{ message.to }}</td>\n          <td *ngIf=\"colVisible('subject')\">{{ message.subject }}</td>\n          <td *ngIf=\"colVisible('date')\">{{ message.date | date: \"yyyy-MM-dd\" }}</td>\n        </tr>\n      </tbody>\n  \n    </table>\n`,\n  styles: []\n})\nexport class MessageTableComponent {\n  @Input() columns: any[];\n  @Input() messages: any[];\n\n  constructor() { }\n\n  colVisible(name) {\n    return this.columns.indexOf(name) !== -1;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/message-table.component.ts","import { Component, OnInit, Input } from '@angular/core';\nimport { setProp } from '../util/util';\nimport { DialogService } from '../global/dialog.service';\nimport { MessagesDataService } from './messages-data.service';\nimport { StateService } from '@uirouter/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Observable } from 'rxjs/Observable';\nimport { Folder, Message } from './interface';\n\n/**\n * This component renders a single message\n *\n * Buttons perform actions related to the message.\n * Buttons are shown/hidden based on the folder's context.\n * For instance, a \"draft\" message can be edited, but can't be replied to.\n */\n@Component({\n  selector: 'app-message',\n  template: `\n    <div class=\"message\">\n    \n      <div class=\"header\">\n        <div>\n          <h4>{{message.subject}}</h4>\n          <h5>{{message.from}} <i class=\"fa fa-long-arrow-right\"></i> {{message.to}}</h5>\n        </div>\n    \n        <div class=\"line2\">\n          <div>{{message.date | date: 'longDate'}} {{message.date | date: 'mediumTime'}}</div>\n          <div>\n            <button class=\"btn btn-primary\" *ngIf=\"actions.edit\" (click)=\"editDraft(message)\">\n              <i class=\"fa fa-pencil\"></i> <span>Edit Draft</span>\n            </button>\n            \n            <button class=\"btn btn-primary\" *ngIf=\"actions.reply\" (click)=\"reply(message)\">\n              <i class=\"fa fa-reply\"></i> <span>Reply</span>\n            </button>\n            \n            <button class=\"btn btn-primary\" *ngIf=\"actions.forward\" (click)=\"forward(message)\">\n              <i class=\"fa fa-forward\" ></i> <span>Forward</span>\n            </button>\n            \n            <button class=\"btn btn-primary\" *ngIf=\"actions.delete\" (click)=\"remove(message)\">\n              <i class=\"fa fa-close\"></i> <span>Delete</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    \n      <!-- Pass the raw (plain text) message body through the messageBody filter to format slightly nicer. -->\n      <div class=\"body\" [innerHTML]=\"message.body | formatMessage\"></div>\n    </div>\n`,\n  styles: []\n})\nexport class MessageComponent implements OnInit {\n  @Input() folder: Folder;\n  @Input() message: Message;\n\n  // What message should be activated if this message is deleted\n  @Input() proximalMessage$: Observable<Message>;\n  private proximalMessageSub: Subscription;\n  proximalMessage: Message;\n\n  // data\n  actions;\n\n  constructor(public stateService: StateService,\n              public dialog: DialogService,\n              public messagesService: MessagesDataService\n  ) { }\n\n  /**\n   * When the user views a message, mark it as read and save (PUT) the resource.\n   *\n   * Apply the available actions for the message, depending on the folder the message belongs to.\n   */\n  ngOnInit() {\n    this.message.read = true;\n    this.messagesService.put(this.message);\n\n    this.actions = this.folder.actions.reduce((obj, action) => setProp(obj, action, true), {});\n    this.proximalMessageSub = this.proximalMessage$.subscribe(message => this.proximalMessage = message);\n  }\n\n  /**\n   * Compose a new message as a reply to this one\n   */\n  reply(message) {\n    const replyMsg = makeResponseMsg('Re: ', message);\n    this.stateService.go('mymessages.compose', { message: replyMsg });\n  };\n\n  /**\n   * Compose a new message as a forward of this one.\n   */\n  forward(message) {\n    const fwdMsg = makeResponseMsg('Fwd: ', message);\n    delete fwdMsg.to;\n    this.stateService.go('mymessages.compose', { message: fwdMsg });\n  };\n\n  /**\n   * Continue composing this (draft) message\n   */\n  editDraft(message) {\n    this.stateService.go('mymessages.compose', { message: message });\n  };\n\n  /**\n   * Delete this message.\n   *\n   * - confirm deletion\n   * - delete the message\n   * - determine which message should be active\n   * - show that message\n   */\n  remove(message) {\n    const nextMessageId = this.proximalMessage && this.proximalMessage._id;\n    const nextState = nextMessageId ? 'mymessages.messagelist.message' : 'mymessages.messagelist';\n    const params = { messageId: nextMessageId };\n\n    this.dialog.confirm('Delete?', undefined)\n      .then(() => this.messagesService.remove(message))\n      .then(() => this.stateService.go(nextState, params, { reload: 'mymessages.messagelist' }));\n  };\n}\n\n\n\n/** Helper function to prefix a message with \"fwd: \" or \"re: \" */\nconst prefixSubject = (prefix, message) => prefix + message.subject;\n/** Helper function which quotes an email message */\nconst quoteMessage = (message) => `\n\n\n\n---------------------------------------\nOriginal message:\nFrom: ${message.from}\nDate: ${message.date}\nSubject: ${message.subject}\n\n${message.body}`;\n\n/** Helper function to make a response message object */\nfunction makeResponseMsg(subjectPrefix, origMsg) {\n  return {\n    from: origMsg.to,\n    to: origMsg.from,\n    subject: prefixSubject(subjectPrefix, origMsg),\n    body: quoteMessage(origMsg)\n  };\n}\n\n\n\n\n// WEBPACK FOOTER //\n// /Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/message.component.ts","import { Injectable } from '@angular/core';\nimport { SessionStorage } from '../util/sessionStorage';\nimport { AppConfigService, SortOrder } from '../global/app-config.service';\nimport { Folder, Message } from './interface';\n\n/** A fake REST client API for Messages resources */\n@Injectable()\nexport class MessagesDataService extends SessionStorage<Message> {\n  static sortedMessages(messages: Message[], sortOrder: SortOrder): Message[] {\n    const getField = (message: Message) =>\n      message[sortOrder.sortBy].toString();\n\n    return messages.slice().sort((a, b) =>\n      getField(a).localeCompare(getField(b)) * sortOrder.order\n    );\n  }\n\n  constructor(appConfig: AppConfigService) {\n    // http://beta.json-generator.com/api/json/get/VJl5GbIze\n    super('messages', 'assets/messages.json', appConfig);\n  }\n\n  byFolder(folder: Folder) {\n    const searchObject = { folder: folder._id };\n    const toFromAttr = ['drafts', 'sent'].indexOf(folder._id) !== -1 ? 'from' : 'to';\n    searchObject[toFromAttr] = this.appConfig.emailAddress;\n    return this.search(searchObject);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/messages-data.service.ts","import { Component, Input } from '@angular/core';\n\n/**\n * The main mymessages component.\n *\n * Renders a list of folders, and has two viewports:\n * - messageList: filled with the list of messages for a folder\n * - messagecontent: filled with the contents of a single message.\n */\n@Component({\n  selector: 'app-mymessages',\n  template: `\n    <div class=\"my-messages\">\n    \n      <!-- Show message folders -->\n      <app-folder-list [folders]=\"folders\"></app-folder-list>\n    \n      <!-- A named view for the list of messages in this folder.  This will be  filled in by the 'mymessages.messagelist' child state -->\n      <ui-view name=\"messagelist\" class=\"messagelist\"></ui-view>\n    \n    </div>\n    \n    <!-- A named ui-view for a message's contents.  The 'mymessages.messagelist.message' grandchild state plugs into this ui-view -->\n    <ui-view name=\"messagecontent\"></ui-view>\n`,\n  styles: []\n})\nexport class MymessagesComponent {\n  @Input() folders: any[];\n\n  constructor() { }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/mymessages.component.ts","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ComposeComponent } from './compose.component';\nimport { MessageComponent } from './message.component';\nimport { MessageListComponent } from './message-list.component';\nimport { MymessagesComponent } from './mymessages.component';\nimport { UIRouterModule } from '@uirouter/angular';\nimport { MYMESSAGES_STATES } from './mymessages.states';\nimport { FormsModule } from '@angular/forms';\nimport { MessagesDataService } from './messages-data.service';\nimport { FoldersDataService } from './folders-data.service';\nimport { FolderListComponent } from './folder-list.component';\nimport { MessageTableComponent } from './message-table.component';\nimport { SortMessagesComponent } from './sort-messages.component';\nimport { FormatMessagePipe } from './format-message.pipe';\n\n@NgModule({\n  imports: [\n    UIRouterModule.forChild({ states: MYMESSAGES_STATES }),\n    FormsModule,\n    CommonModule\n  ],\n  declarations: [\n    ComposeComponent,\n    MessageComponent,\n    MessageListComponent,\n    MymessagesComponent,\n    FolderListComponent,\n    MessageTableComponent,\n    SortMessagesComponent,\n    FormatMessagePipe,\n  ],\n  providers: [\n    MessagesDataService,\n    FoldersDataService,\n  ]\n})\nexport class MymessagesModule { }\n\n\n\n// WEBPACK FOOTER //\n// /Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/mymessages.module.ts","import { ComposeComponent } from './compose.component';\nimport { MessageListComponent } from './message-list.component';\nimport { MessageComponent } from './message.component';\nimport { MymessagesComponent } from './mymessages.component';\nimport { Ng2StateDeclaration } from '@uirouter/angular';\nimport { Transition } from '@uirouter/core';\nimport { FoldersDataService } from './folders-data.service';\nimport { MessagesDataService } from './messages-data.service';\nimport { AppConfigService } from '../global/app-config.service';\nimport { Observable } from 'rxjs/Observable';\nimport { Folder, Message } from './interface';\nimport 'rxjs/add/operator/map';\n\nexport function getFolders(foldersService: FoldersDataService) {\n  return foldersService.all();\n}\n\n/**\n * The mymessages state. This is the main state for the mymessages submodule.\n *\n * This state shows the list of folders for the current user. It retrieves the folders from the\n * Folders service.  If a user navigates directly to this state, the state redirects to the 'mymessages.messagelist'.\n */\nexport const mymessagesState: Ng2StateDeclaration = {\n  parent: 'app',\n  name: 'mymessages',\n  url: '/mymessages',\n  component: MymessagesComponent,\n  resolve: [\n    // All the folders are fetched from the Folders service\n    { token: 'folders', deps: [FoldersDataService], resolveFn: getFolders },\n  ],\n  // If mymessages state is directly activated, redirect the transition to the child state 'mymessages.messagelist'\n  redirectTo: 'mymessages.messagelist',\n  // Mark this state as requiring authentication.  See ../routerhooks/requiresAuth.js.\n  data: { requiresAuth: true }\n};\n\n\nexport function getFolder(foldersService: FoldersDataService, transition: Transition) {\n  return foldersService.get(transition.params().folderId);\n}\n\nexport function getMessages(messagesService: MessagesDataService, folder: Folder,\n                            appConfig: AppConfigService): Promise<Observable<Message[]>> {\n  const promise = messagesService.byFolder(folder);\n\n  return promise.then(messages => appConfig.sort$.map(sortOrder =>\n    MessagesDataService.sortedMessages(messages, sortOrder)\n  ));\n}\n\n/**\n * This state shows the contents (a message list) of a single folder\n */\nexport const messageListState = {\n  name: 'mymessages.messagelist',\n  url: '/:folderId',\n  // The folderId parameter is part of the URL.  This params block sets 'inbox' as the default value.\n  // If no parameter value for folderId is provided on the transition, then it will be defaulted to 'inbox'\n  params: { folderId: 'inbox' },\n  views: {\n    // This targets the \"messagelist\" named ui-view added to the DOM in the parent state 'mymessages'\n    messagelist: {\n      component: MessageListComponent,\n    },\n  },\n  resolve: [\n    // Fetch the current folder from the Folders service, using the folderId parameter\n    { token: 'folder', deps: [FoldersDataService, Transition], resolveFn: getFolder },\n\n    // The folder object (from the resolve above) is injected into this resolve\n    // The list of message for the folder are fetched from the Messages service\n    { token: 'messages$', deps: [MessagesDataService, 'folder', AppConfigService], resolveFn: getMessages },\n  ],\n};\n\n\nexport function getMessage(messagesService: MessagesDataService, transition: Transition) {\n  return messagesService.get(transition.params().messageId);\n}\n\nexport function getProximalMessage(messages$, message) {\n  return messages$.map(messages => {\n    const curIdx = messages.indexOf(message);\n    const nextIdx = curIdx === messages.length ? curIdx - 1 : curIdx + 1;\n    return messages[nextIdx];\n  });\n}\n\n/**\n * This state shows the contents of a single message.\n * It also has UI to reply, forward, delete, or edit an existing draft.\n */\nexport const messageState: Ng2StateDeclaration = {\n  name: 'mymessages.messagelist.message',\n  url: '/:messageId',\n  views: {\n    // Relatively target the parent-state's parent-state's 'messagecontent' ui-view\n    // This could also have been written using ui-view@state addressing: 'messagecontent@mymessages'\n    // Or, this could also have been written using absolute ui-view addressing: '!$default.$default.messagecontent'\n    '^.^.messagecontent': {\n      component: MessageComponent,\n    },\n  },\n  resolve: [\n    // Fetch the message from the Messages service using the messageId parameter\n    { token: 'message', deps: [MessagesDataService, Transition], resolveFn: getMessage },\n\n    // Provide the component with the next closest message to activate if the current message is deleted\n    { token: 'proximalMessage$', deps: ['messages$', 'message'], resolveFn: getProximalMessage }\n  ],\n};\n\n\n/**\n * This state allows the user to compose a new message, edit a drafted message, send a message,\n * or save an unsent message as a draft.\n *\n * This state uses view-targeting to take over the ui-view that would normally be filled by the 'mymessages' state.\n */\nexport const composeState: Ng2StateDeclaration = {\n  name: 'mymessages.compose',\n  url: '/compose',\n  views: {\n    // Absolutely targets the $default (unnamed) ui-view, two nesting levels down with the composeComponent.\n    '!$default.$default': { component: ComposeComponent }\n  },\n  // Declares that this state has a 'message' parameter, that defaults to an empty object.\n  // Note the parameter does not appear in the URL.\n  params: {\n    message: {}\n  },\n};\n\nexport const MYMESSAGES_STATES = [\n  mymessagesState,\n  messageListState,\n  messageState,\n  composeState,\n];\n\n\n\n// WEBPACK FOOTER //\n// /Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/mymessages.states.ts","import { Component, OnInit, Input, HostListener, OnDestroy } from '@angular/core';\nimport { AppConfigService } from '../global/app-config.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n/**\n * A directive (for a table header) which changes the app's sort order\n */\n@Component({\n  selector: '[app-sort-messages]',\n  template: `\n    <i style='padding-left: 0.25em' \n      class='fa' \n      [class.fa-sort-asc]=\"asc\" \n      [class.fa-sort-desc]=\"desc\"\n    ></i>{{ label }}\n`,\n  styles: []\n})\nexport class SortMessagesComponent implements OnInit, OnDestroy {\n  @Input('prop') prop: string;\n  @Input('label') label: string;\n  private _sub: Subscription;\n  public asc: boolean;\n  public desc: boolean;\n\n  constructor(private appConfig: AppConfigService) { }\n\n  ngOnInit() {\n    this._sub = this.appConfig.sort$.subscribe(() => this.update());\n  }\n\n  ngOnDestroy() {\n    this._sub.unsubscribe();\n  }\n\n  update() {\n    const sort = this.appConfig.sort$.value;\n    const matches = sort.sortBy === this.prop;\n    this.asc = matches && sort.order < 0;\n    this.desc = matches && sort.order > 0;\n  }\n\n  @HostListener('click', ['$event'])\n  onClick(e) {\n    this.appConfig.sort = (this.asc ? '+' : '-') + this.prop;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/cthielen/projects/uirouter/sample-app-angular/src/app/mymessages/sort-messages.component.ts"],"sourceRoot":"webpack:///"}